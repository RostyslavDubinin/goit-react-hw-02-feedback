{"version":3,"sources":["components/Controls.js","components/Statistics.js","components/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","onGood","onNeutral","onBad","className","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Feedback","state","handleGood","setState","handleNeutral","handleBad","this","countPositiveFeedbackPercentage","Component","defaultProps","initialValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAiBeA,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,UAAWC,EAAtB,EAAsBA,MAAtB,OACtB,sBAAKC,UAAU,kBAAf,UACI,uDACF,wBAAQC,KAAK,SAASC,QAASL,EAA/B,kBAGA,wBAAQI,KAAK,SAASC,QAASJ,EAA/B,qBAGA,wBAAQG,KAAK,SAASC,QAASH,EAA/B,qBCQWI,EAjBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,qBAAKR,UAAU,aAAf,SACI,gCACE,4CACA,uCAAUI,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACVC,EAAqB,EACvB,oDAAuBA,EAAvB,OACA,4DCPHC,G,kNASJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPK,WAAa,WACX,EAAKC,UAAS,SAAAF,GAAK,MAAK,CACpBN,KAAMM,EAAMN,KAAO,O,EAIzBS,cAAgB,WACd,EAAKD,UAAS,SAAAF,GAAK,MAAK,CACpBL,QAASK,EAAML,QAAU,O,EAI/BS,UAAY,WACV,EAAKF,UAAS,SAAAF,GAAK,MAAK,CACpBJ,IAAKI,EAAMJ,IAAM,O,4CAiBvB,WACE,MAA6BS,KAAKL,MAA3BN,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,IAChBC,EAAQH,EAAOC,EAAUC,EAK/B,OACE,sBAAKN,UAAU,WAAf,UAGE,cAAC,EAAD,CACEH,OAAQkB,KAAKJ,WACbb,UAAWiB,KAAKF,cAChBd,MAAOgB,KAAKD,YAEd,cAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBO,KAAKC,yC,GAlEZC,cAAjBR,EACGS,aAAe,CACpBC,aAAc,GAuEHV,QCjEAW,EARH,WACV,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.91b0f975.chunk.js","sourcesContent":["import React from 'react';\n\nconst FeedbackOptions = ({ onGood, onNeutral, onBad }) => (\n  <div className=\"FeedbackOptions\">\n      <h1>Please leave feedback</h1>\n    <button type=\"button\" onClick={onGood}>\n      Good\n    </button>\n    <button type=\"button\" onClick={onNeutral}>\n      Neutral\n    </button>\n    <button type=\"button\" onClick={onBad}>\n      Bad\n    </button>\n  </div>\n);\n\nexport default FeedbackOptions;","import React from 'react';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n    <div className=\"Statistics\">\n        <div>\n          <h1>Statistics</h1>\n          <p>Good: {good}</p>\n          <p>Neutral: {neutral}</p>\n          <p>Bad: {bad}</p>\n          <p>Total: {total}</p>\n          {positivePercentage > 0 ? \n         <p>Positive feedback: {positivePercentage}%</p> :\n         <p>Positive feedback: 0%</p>\n          }\n        </div>\n    </div>\n  );\n\n\nexport default Statistics;","import React, { Component } from 'react';\nimport FeedbackOptions from './Controls';\nimport Statistics from './Statistics';\nimport './Feedback.module.css';\n\nclass Feedback extends Component {\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  static propTypes = {\n    //\n  };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n  handleGood = () => {\n    this.setState(state => ({\n        good: state.good + 1,\n    }));\n  };\n\n  handleNeutral = () => {\n    this.setState(state => ({\n        neutral: state.neutral + 1,\n    }));\n  };\n\n  handleBad = () => {\n    this.setState(state => ({\n        bad: state.bad + 1,\n    }));\n  };\n\n  // countTotalFeedback = ({good, neutral, bad}) => {\n  //   return good + neutral + bad;\n  // };\n\n\n  // countPositiveFeedbackPercentage({good, neutral, bad}){\n  //   const total = good + neutral + bad;\n  //   const positivePercentage = good*100/total;\n  //   return positivePercentage;\n  // }\n\n  \n\n  render() {\n    const {good, neutral, bad} = this.state;\n    const total = good + neutral + bad;\n    // const positivePercentage = good*100/total;\n    \n    \n\n    return (\n      <div className=\"Feedback\">\n        \n\n        <FeedbackOptions\n          onGood={this.handleGood}\n          onNeutral={this.handleNeutral}\n          onBad={this.handleBad}\n        />\n        <Statistics \n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={this.countPositiveFeedbackPercentage}\n          />\n      </div>\n    );\n  }\n}\n\nexport default Feedback;\n","import React from 'react';\nimport Feedback from './components/Feedback';\n\n\n\nconst App = () => {\n  return (\n    <div>\n      <Feedback/>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}